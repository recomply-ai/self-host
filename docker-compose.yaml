x-backend-image: &backend-image us-central1-docker.pkg.dev/propane-bebop-462910-g8/recomply-ai-backend/backend:9c358dfc3d8174c67fa3a95d55bb2315f33b62c1
x-frontend-image: &frontend-image us-central1-docker.pkg.dev/propane-bebop-462910-g8/recomply-ai-frontend/frontend:b7d4c8013396f4f4175295f0973cb7e13290e2e0

x-common-environment: &common-environment
  LOG_LEVEL: INFO
  APP_ENV: dev
  PYTHONPATH: /app/src
  DATABASE_URL: postgresql+asyncpg://postgres:postgres@postgres:5432/recomply_ai
  REDIS_URL: redis://redis:6379/2
  JWT_SECRET_KEY: system-jwt-secret
  ADMIN_USERNAME: admin
  ADMIN_PASSWORD: secret123
  CLIENT_API_KEY: api-key
  BROWSER_USE_BROWSER_BINARY_PATH: /usr/bin/chromium

x-common-env-file: &common-env-file
  - .env

services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: recomply_ai
    volumes:
      - ./.data/postgres:/var/lib/postgresql/data
    shm_size: 256mb
    tmpfs:
      - /tmp
      - /var/run/postgresql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d recomply_ai"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    volumes:
      - ./.data/redis:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  migrations:
    image: *backend-image
    command: sh -c "uv run alembic upgrade head"
    environment:
      <<: *common-environment
    env_file: *common-env-file
    depends_on:
      postgres:
        condition: service_healthy

  api:
    image: *backend-image
    command: uv run python -m scripts.run_api_server
    environment:
      <<: *common-environment
    env_file: *common-env-file
    depends_on:
      redis:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/api/docs', timeout=5)"]
      interval: 10s
      timeout: 5s
      retries: 5

  worker:
    image: *backend-image
    command: uv run python -m scripts.run_arq_worker
    environment:
      <<: *common-environment
    env_file: *common-env-file
    depends_on:
      redis:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully

  frontend:
    image: *frontend-image
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    image: nginx:alpine
    command: /bin/sh -c "envsubst '$$BACKEND_URL $$FRONTEND_URL' < /etc/nginx/templates/nginx.conf.template > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf.template:/etc/nginx/templates/nginx.conf.template:ro
      - ./.data/logs:/var/log/nginx
    environment:
      - BACKEND_URL=api:8000
      - FRONTEND_URL=frontend:80
    depends_on:
      api:
        condition: service_healthy
      frontend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 10s
      timeout: 5s
      retries: 5
